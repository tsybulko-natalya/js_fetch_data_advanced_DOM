{"version":3,"sources":["scripts/main.js"],"names":["MAIN_URL","document","body","insertAdjacentHTML","request","url","fetch","then","response","ok","Error","status","statusText","json","renderElements","selector","innerText","list","querySelector","item","createElement","append","getFirstReceivedDetails","ids","Promise","race","map","id","received","name","getAllSuccessfulDetails","allSettled","results","forEach","result","value","getPhones","phoneIds","p","all","catch","error","console"],"mappings":";AACA,aAEA,IAAMA,EAAW,6DAEjBC,SAASC,KAAKC,mBAAmB,YAAjC,8MAeA,IAAMC,EAAU,SAACC,GACRC,OAAAA,MAASN,GAAAA,OAAAA,GAAWK,OAAAA,IACxBE,KAAK,SAAAC,GACA,IAACA,EAASC,GACN,MAAA,IAAIC,MAASF,GAAAA,OAAAA,EAASG,OAAYH,OAAAA,OAAAA,EAASI,aAG5CJ,OAAAA,EAASK,UAIhBC,EAAiB,SAACC,EAAUC,GAC1BC,IAAAA,EAAOhB,SAASiB,cAAcH,GAAUG,cAAc,MACtDC,EAAOlB,SAASmB,cAAc,MAEpCD,EAAKH,UAAYA,EAEjBC,EAAKI,OAAOF,IAGRG,EAA0B,SAACC,GACxBC,OAAAA,QAAQC,KAAKF,EAAIG,IAAI,SAAAC,GAAMvB,OAAAA,EAAkBuB,UAAAA,OAAAA,EAAtB,aAC3BpB,KAAK,SAAAqB,GACJd,EAAe,kBAAmBc,EAASC,SAI3CC,EAA0B,SAACP,GACxBC,OAAAA,QAAQO,WAAWR,EAAIG,IAAI,SAAAC,GAAMvB,OAAAA,EAAkBuB,UAAAA,OAAAA,EAAtB,aACjCpB,KAAK,SAAAyB,GACJA,EAAQC,QAAQ,SAACC,GACO,cAAlBA,EAAOvB,QAIXG,EAAe,kBAAmBoB,EAAOC,MAAMN,WAKjDO,EAAY,WAAMhC,OAAAA,EAAQ,gBAEhCgC,IACG7B,KAAK,SAAAC,GACE6B,IAAAA,EAAW7B,EAASkB,IAAI,SAAAY,GAAKA,OAAAA,EAAEX,KAE9BH,OAAAA,QAAQe,IAAI,CACjBjB,EAAwBe,GACxBP,EAAwBO,OAG3BG,MAAM,SAAAC,GAASC,OAAAA,QAAQD,MAAMA","file":"main.e333e0bf.js","sourceRoot":"../src","sourcesContent":["/* eslint-disable no-console */\n'use strict';\n\nconst MAIN_URL = 'https://mate-academy.github.io/phone-catalogue-static/api/';\n\ndocument.body.insertAdjacentHTML('beforeend', `\n  <div class=\"first-received\">\n    <h3>\n      First Received\n    </h3>\n    <ul></ul>\n  </div>\n  <div class=\"all-successful\">\n    <h3>\n      All Successful\n    </h3>\n    <ul></ul>\n  </div>\n`);\n\nconst request = (url) => {\n  return fetch(`${MAIN_URL}${url}`)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error(`${response.status} - ${response.statusText}`);\n      }\n\n      return response.json();\n    });\n};\n\nconst renderElements = (selector, innerText) => {\n  const list = document.querySelector(selector).querySelector('ul');\n  const item = document.createElement('li');\n\n  item.innerText = innerText;\n\n  list.append(item);\n};\n\nconst getFirstReceivedDetails = (ids) => {\n  return Promise.race(ids.map(id => request(`phones/${id}.json`)))\n    .then(received => {\n      renderElements('.first-received', received.name);\n    });\n};\n\nconst getAllSuccessfulDetails = (ids) => {\n  return Promise.allSettled(ids.map(id => request(`phones/${id}.json`)))\n    .then(results => {\n      results.forEach((result) => {\n        if (result.status !== 'fulfilled') {\n          return;\n        }\n\n        renderElements('.all-successful', result.value.name);\n      });\n    });\n};\n\nconst getPhones = () => request('phones.json');\n\ngetPhones()\n  .then(response => {\n    const phoneIds = response.map(p => p.id);\n\n    return Promise.all([\n      getFirstReceivedDetails(phoneIds),\n      getAllSuccessfulDetails(phoneIds),\n    ]);\n  })\n  .catch(error => console.error(error));\n"]}